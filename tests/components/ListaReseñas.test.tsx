import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import ListaRese√±as from '../../components/ListaRese√±as';
import { vi } from 'vitest';

global.fetch = vi.fn();

const mockRese√±as = [
  { id: 1, calificacion: 4, likes: 2, dislikes: 1, contenido: 'Muy bueno' },
  { id: 2, calificacion: 3, likes: 1, dislikes: 0, contenido: 'Aceptable' },
];

describe('ListaRese√±as', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('muestra mensaje si no hay rese√±as', () => {
    render(<ListaRese√±as libroId="123" rese√±as={[]} />);
    expect(screen.getByText(/no hay rese√±as a√∫n/i)).toBeInTheDocument();
  });

  it('renderiza las rese√±as correctamente', () => {
    render(<ListaRese√±as libroId="123" rese√±as={mockRese√±as} />);
    expect(screen.getByText('Muy bueno')).toBeInTheDocument();
    expect(screen.getByText('Aceptable')).toBeInTheDocument();
    expect(screen.getByText('‚òÖ‚òÖ‚òÖ‚òÖ')).toBeInTheDocument();
    expect(screen.getByText('‚òÖ‚òÖ‚òÖ')).toBeInTheDocument();
  });

  it('no hace nada si no se pasa setRese√±as al votar', async () => {
    render(<ListaRese√±as libroId="123" rese√±as={mockRese√±as} />);
    const likeButton = screen.getAllByText(/üëç/i)[0];
    fireEvent.click(likeButton);

    expect(global.fetch).not.toHaveBeenCalled();
  });

  it('actualiza likes y llama fetch al votar positivo', async () => {
    const setRese√±as = vi.fn();

    (global.fetch as any).mockResolvedValueOnce({ ok: true });

    render(<ListaRese√±as libroId="123" rese√±as={mockRese√±as} setRese√±as={setRese√±as} />);

    const likeButtons = screen.getAllByText(/üëç/i);
    fireEvent.click(likeButtons[0]);

    expect(setRese√±as).toHaveBeenCalled();

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith(
        '/api/resenas/1/votar',
        expect.objectContaining({
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tipo: 'UP' }),
        })
      );
    });
  });

  it('actualiza dislikes y llama fetch al votar negativo', async () => {
    const setRese√±as = vi.fn();

    (global.fetch as any).mockResolvedValueOnce({ ok: true });

    render(<ListaRese√±as libroId="123" rese√±as={mockRese√±as} setRese√±as={setRese√±as} />);

    const dislikeButtons = screen.getAllByText(/üëé/i);
    fireEvent.click(dislikeButtons[0]);

    expect(setRese√±as).toHaveBeenCalled();

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith(
        '/api/resenas/1/votar',
        expect.objectContaining({
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tipo: 'DOWN' }),
        })
      );
    });
  });

  it('maneja error en fetch sin lanzar excepci√≥n', async () => {
    const setRese√±as = vi.fn();
    (global.fetch as any).mockRejectedValueOnce(new Error('fail'));

    render(<ListaRese√±as libroId="123" rese√±as={mockRese√±as} setRese√±as={setRese√±as} />);

    const likeButtons = screen.getAllByText(/üëç/i);
    fireEvent.click(likeButtons[0]);

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalled();
    });

  });
});
